{
   "info":{
      "title":"User Data Services",
      "description":"The goal of this service is to come up with a single, consolidated view of a User and its associated data structures needed to interact with our various products. This service aims to be the source of truth for everything related to a User.  More information about the service and its archetecture is available on [engineering.beescloud](https://engineering.beescloud.com/docs/platform/latest/)",
      "version":"1.0.0"
   },
   "tags":[
      {
         "name":"Organizations",
         "description":"An organization is an entity with a body of people in a business. Members of an organization have access to a set of entitlements, which are associated with CloudBees product subscriptions, trials, and preview programs. "
      },
      {
         "name":"Teams"
      },
      {
         "name":"Invites"
      },
      {
         "name":"Logins"
      },
      {
         "name":"Permissions"
      },
      {
         "name":"SAML",
         "description":"Manage email-domains and associated connections for SAML SSO. Only verified domains can be associated to connections."
      },
      {
         "name":"Roles"
      },
      {
         "name":"Users"
      },
      {
         "name":"Self",
         "description":"Self-management resources for users."
      },
      {
         "name":"Utils",
         "description":"Utility endpoints for various administrative and internal functions. Not for general or external use. M2M token required."
      },
      {
         "name":"Permissions Service",
         "description":"Permissions Service endpoints. This may become its own service in the future."
      }
   ],
   "servers":[
      {
         "url":"https://uds.dev.beescloud.com"
      }
   ],
   "components":{
      "securitySchemes":{
         "bearerAuth":{
            "type":"http",
            "scheme":"bearer"
         },
         "m2m":{
            "type":"oauth2",
            "flows":{
               "clientCredentials":{
                  "tokenUrl":"https://id.dev.beescloud.com/oauth/token",
                  "scopes":{
                     "organizations:read":"Perform read operations on organizations entities.",
                     "organizations:write":"Perform write operations on organizations entities.",
                     "teams:read":"Perform read operations on teams entities.",
                     "teams:write":"Perform write operations on teams entities.",
                     "invites:read":"Perform read operations on invites entities.",
                     "invites:write":"Perform write operations on invites entities.",
                     "logins:read":"Perform read operations on logins entities.",
                     "logins:write":"Perform write operations on logins entities.",
                     "permissions:read":"Perform read operations on permissions entities.",
                     "permissions:write":"Perform write operations on permissions entities.",
                     "saml:read":"Perform read operations on saml entities.",
                     "saml:write":"Perform write operations on saml entities.",
                     "roles:read":"Perform read operations on roles entities.",
                     "roles:write":"Perform write operations on roles entities.",
                     "users:read":"Perform read operations on users entities.",
                     "users:write":"Perform write operations on users entities.",
                     "logins:authenticate":"Perform special operation logins:authenticate.",
                     "logins:logout":"Perform special operation logins:logout.",
                     "organizations:availability":"Perform special operation organizations:availability.",
                     "utils:manageMfa":"Perform special operation utils:manageMfa.",
                     "utils:resetPassword":"Perform special operation utils:resetPassword.",
                     "utils:processPendingInvites":"Perform special operation utils:processPendingInvites.",
                     "utils:syncSamlConnections":"Perform special operation utils:syncSamlConnections.",
                     "utils:importLegacyConnections":"Perform special operation utils:importLegacyConnections.",
                     "utils:processSamlLogin":"Perform special operation utils:processSamlLogin.",
                     "utils:automaticOrgCreation":"Perform special operation utils:automaticOrgCreation."
                  }
               }
            }
         }
      },
      "schemas":{
         "metadataOperation":{
            "title":"Metadata mutation operation",
            "description":"JSON Patch operation to be performed (RFC 6902)",
            "type":"array",
            "items":{
               "properties":{
                  "path":{
                     "type":"string",
                     "description":"JSON path",
                     "example":"/key"
                  },
                  "op":{
                     "type":"string",
                     "description":"operation to be performed: add | replace",
                     "example":"add"
                  },
                  "value":{
                     "anyOf":[
                        {
                           "type":"object"
                        },
                        {
                           "type":"array",
                           "items":{
                              
                           }
                        },
                        {
                           "type":"number"
                        },
                        {
                           "type":"string"
                        },
                        {
                           "type":"boolean"
                        }
                     ],
                     "description":"new value",
                     "example":"someVal"
                  },
                  "from":{
                     "type":"string",
                     "description":"starting key",
                     "example":"/key"
                  }
               }
            }
         },
         "domainAvailability":{
            "title":"Domain availability",
            "description":"Response indicating domain availability.",
            "type":"object",
            "required":[
               "available"
            ],
            "properties":{
               "available":{
                  "type":"boolean"
               }
            }
         },
         "teamMembership":{
            "title":"Team membership mutation operation",
            "description":"Object representing user assignments to team roles.",
            "type":"object",
            "anyOf":[
               {
                  "required":[
                     "user"
                  ]
               },
               {
                  "required":[
                     "admin"
                  ]
               },
               {
                  "required":[
                     "user",
                     "admin"
                  ]
               }
            ],
            "properties":{
               "user":{
                  "type":"array",
                  "description":"Users to be associated with the user role.",
                  "items":{
                     "type":"string"
                  }
               },
               "admin":{
                  "type":"array",
                  "description":"Users to be associated with the admin role.",
                  "items":{
                     "type":"string"
                  }
               }
            }
         },
         "processPendingInvites":{
            "title":"Payload to request invite reprocess",
            "description":"Email and user for whom to reprocess invites",
            "type":"object",
            "required":[
               "email",
               "provider"
            ],
            "properties":{
               "email":{
                  "type":"string"
               },
               "provider":{
                  "type":"string"
               }
            }
         },
         "mfaUser":{
            "title":"MFA configuration payload for a user",
            "description":"MFA configuration payload for a user",
            "type":"object",
            "required":[
               "mfaToken",
               "userId"
            ],
            "properties":{
               "mfaToken":{
                  "type":"string"
               },
               "userId":{
                  "type":"string"
               }
            }
         },
         "mfaRecoveryCodes":{
            "title":"MFA barcode URI",
            "description":"MFA barcode URI to scan with device",
            "type":"object",
            "required":[
               "recoveryCodes"
            ],
            "properties":{
               "recoveryCodes":{
                  "type":"string"
               }
            }
         },
         "mfaBarcode":{
            "title":"MFA barcode URI",
            "description":"MFA barcode URI to scan with device",
            "type":"object",
            "required":[
               "barcodeUri"
            ],
            "properties":{
               "barcodeUri":{
                  "type":"string"
               }
            }
         },
         "mfaFinalize":{
            "title":"MFA finalization payload for a user",
            "description":"MFA finalization payload for a user",
            "type":"object",
            "required":[
               "otpCode",
               "mfaToken",
               "userId"
            ],
            "properties":{
               "otpCode":{
                  "type":"string"
               },
               "mfaToken":{
                  "type":"string"
               },
               "userId":{
                  "type":"string"
               }
            }
         },
         "mfaUserEmail":{
            "title":"Payload to identify user for MFA",
            "description":"Payload to identify a user by emai, for Admin-only MFA operations",
            "type":"object",
            "required":[
               "userEmail",
               "provider"
            ],
            "properties":{
               "userEmail":{
                  "type":"string"
               },
               "provider":{
                  "type":"string"
               }
            }
         },
         "loginPassword":{
            "allOf":[
               {
                  "$ref":"#/components/schemas/logins_patch"
               },
               {
                  "title":"Login mutation object",
                  "description":"For updating a login/password",
                  "type":"object",
                  "properties":{
                     "currentPassword":{
                        "type":"string",
                        "description":"User's current password, only required if updating password"
                     }
                  }
               }
            ]
         },
         "authenticate":{
            "title":"Authentication operation",
            "description":"Object to allow a login to authenticate",
            "type":"object",
            "required":[
               "password"
            ],
            "properties":{
               "loginId":{
                  "type":"string",
                  "description":"The id of the login."
               },
               "email":{
                  "type":"string",
                  "description":"The email address of the login."
               },
               "password":{
                  "type":"string",
                  "description":"The password to authenticate with."
               }
            }
         },
         "logout":{
            "title":"Logout operation",
            "description":"Object to pass to a global logout operation",
            "type":"object",
            "required":[
               
            ],
            "properties":{
               
            }
         },
         "patchDomainDto":{
            "title":"New value for domain entity",
            "description":"New value for domain entity, only listed attributes are mutable.",
            "type":"object",
            "properties":{
               "verified":{
                  "type":"boolean"
               },
               "connectionId":{
                  "type":"string"
               }
            }
         },
         "connectionEmailDomains":{
            "allOf":[
               {
                  "$ref":"#/components/schemas/connections_patch"
               },
               {
                  "title":"Connection object with association to domains",
                  "description":"For creating and updating a connection and associating it with the specified domains.",
                  "type":"object",
                  "properties":{
                     "emailDomainIds":{
                        "type":"array",
                        "description":"Array of domain IDs to be associated with this connection.",
                        "items":{
                           "type":"string",
                           "format":"uuid"
                        }
                     }
                  }
               }
            ]
         },
         "ConnectionSynchronization":{
            "title":"Connection synchronization process payload.",
            "description":"Entity representing a request to synchronize UDS connection objects with external systems.",
            "type":"object",
            "oneOf":[
               {
                  "required":[
                     "allConnections"
                  ]
               },
               {
                  "required":[
                     "connectionId"
                  ]
               }
            ],
            "properties":{
               "connectionId":{
                  "type":"string",
                  "description":"Identifier of connection to synchronize. Cannot be set if \"allConnections\" set."
               },
               "allConnections":{
                  "type":"boolean",
                  "description":"Boolean indicating to sync all connections in database. Cannot be set if \"connectionId\" set."
               }
            }
         },
         "processSamlLogin":{
            "title":"SAML login payload",
            "description":"Entity representing a request to validate a SAML login and potentially auto-provision the associated user.",
            "type":"object",
            "required":[
               "email",
               "connectionName"
            ],
            "properties":{
               "email":{
                  "type":"string",
                  "description":"Email of SAML user to provision into the organization."
               },
               "connectionName":{
                  "type":"string",
                  "description":"SAML connection name used with this SAML login."
               }
            }
         },
         "ConnectionSamlpMetadata":{
            "title":"SAML metadata",
            "description":"SAML SP metadata for the specified connection.",
            "type":"object",
            "properties":{
               "samlpMetadata":{
                  "type":"string",
                  "description":"SAML metadata XML"
               }
            }
         },
         "ImportLegacyConnection":{
            "title":"Legacy connection import process payload.",
            "description":"List of entities representing an Auth0 connection to import, and Organziation to import it to.",
            "type":"array",
            "items":{
               "properties":{
                  "connectionName":{
                     "type":"string",
                     "description":"Auth0 logical identifier (name) of connection to import."
                  },
                  "organizationId":{
                     "type":"string",
                     "description":"Organization ID (UUID) to add the connection to."
                  }
               }
            }
         },
         "ConnectionReconciliation":{
            "title":"Connection synchronization response payload.",
            "description":"Entity representing updated and created connections.",
            "type":"object",
            "properties":{
               "create":{
                  "type":"array",
                  "description":"Created Auth0 connections",
                  "items":{
                     "type":"object"
                  }
               },
               "update":{
                  "type":"array",
                  "description":"Updated Auth0 connections",
                  "items":{
                     "type":"object"
                  }
               }
            }
         },
         "userPermissions":{
            "allOf":[
               {
                  "$ref":"#/components/schemas/users"
               },
               {
                  "title":"User permissions",
                  "description":"User object including permissions",
                  "type":"object",
                  "properties":{
                     "permissions":{
                        "type":"object",
                        "description":"Permissions strings for each of the user's organizations",
                        "example":{
                           "aaaaaaaa-bbbb-1111-cccc-dddddddddddd:my-org":[
                              "iam/admin"
                           ]
                        }
                     }
                  }
               }
            ]
         },
         "passwordResetLink":{
            "title":"Password reset response",
            "description":"Response for password reset request",
            "type":"object",
            "properties":{
               "resetPasswordLink":{
                  "type":"string",
                  "description":"Link to reset password."
               }
            }
         },
         "resetPassword":{
            "title":"Password reset payload",
            "description":"Entity representing a request to get a password reset link.",
            "type":"object",
            "required":[
               "email"
            ],
            "properties":{
               "email":{
                  "type":"string",
                  "description":"Email of SAML user to provision into the organization."
               }
            }
         },
         "resourceDefinitionScopes":{
            "title":"Link resource definition to scopes",
            "description":"Object representing list of scope ids to associate with a resource definition",
            "type":"object",
            "required":[
               "scopeIds"
            ],
            "properties":{
               "scopeIds":{
                  "type":"array",
                  "description":"Scopes to be associated with a resource definition.",
                  "items":{
                     "type":"string"
                  }
               }
            }
         },
         "automaticOrgCreation":{
            "title":"Payload to trigger automatic org creation",
            "description":"Email and provider for whom to trigger automatic org creation",
            "type":"object",
            "required":[
               "userId"
            ],
            "properties":{
               "userId":{
                  "type":"string"
               }
            }
         },
         "userTeam":{
            "title":"UserTeam",
            "type":"object",
            "properties":{
               "teamRole":{
                  "type":"string",
                  "enum":[
                     "owner",
                     "admin",
                     "user"
                  ],
                  "nullable":true,
                  "default":"user"
               },
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "team":{
                  "$ref":"#/components/schemas/teams"
               },
               "user":{
                  "$ref":"#/components/schemas/users"
               }
            }
         },
         "teamBindings":{
            "title":"TeamBinding",
            "type":"object",
            "properties":{
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "roleId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "rolePermissions":{
            "title":"RolePermission",
            "type":"object",
            "properties":{
               "roleId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "permissionId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "userBindings":{
            "title":"UserBinding",
            "type":"object",
            "properties":{
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "roleId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "resourceDefinitionScope":{
            "title":"ResourceDefinitionScope",
            "type":"object",
            "properties":{
               "resourceDefinitionId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "scopeId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            },
            "required":[
               "resourceDefinitionId",
               "scopeId"
            ]
         },
         "users":{
            "title":"User",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "firstName":{
                  "type":"string",
                  "nullable":true
               },
               "lastName":{
                  "type":"string",
                  "nullable":true
               },
               "isVerified":{
                  "type":"boolean",
                  "default":false
               },
               "userTeam":{
                  "$ref":"#/components/schemas/userTeam"
               }
            }
         },
         "users_patch":{
            "title":"User Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "firstName":{
                  "type":"string",
                  "nullable":true
               },
               "lastName":{
                  "type":"string",
                  "nullable":true
               },
               "isVerified":{
                  "type":"boolean",
                  "default":false
               }
            }
         },
         "users_list":{
            "title":"Users list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/users"
            }
         },
         "users_paginated":{
            "title":"Paginated Users list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/users"
                  }
               }
            }
         },
         "organizations":{
            "title":"Organization",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "domain":{
                  "type":"string",
                  "maxLength":42,
                  "minLength":3,
                  "pattern":"^[a-z0-9][a-z-0-9]*[a-z0-9]$"
               }
            },
            "required":[
               "name",
               "domain"
            ]
         },
         "organizations_patch":{
            "title":"Organization Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "domain":{
                  "type":"string",
                  "maxLength":42,
                  "minLength":3,
                  "pattern":"^[a-z0-9][a-z-0-9]*[a-z0-9]$"
               }
            }
         },
         "organizations_list":{
            "title":"Organizations list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/organizations"
            }
         },
         "organizations_paginated":{
            "title":"Paginated Organizations list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/organizations"
                  }
               }
            }
         },
         "teams":{
            "title":"Team",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "default":{
                  "type":"boolean",
                  "default":false
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "userTeam":{
                  "$ref":"#/components/schemas/userTeam"
               }
            },
            "required":[
               "name",
               "organizationId"
            ]
         },
         "teams_patch":{
            "title":"Team Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "default":{
                  "type":"boolean",
                  "default":false
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "teams_list":{
            "title":"Teams list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/teams"
            }
         },
         "teams_paginated":{
            "title":"Paginated Teams list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/teams"
                  }
               }
            }
         },
         "roles":{
            "title":"Role",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "namespace":{
                  "type":"string"
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            },
            "required":[
               "name",
               "namespace",
               "organizationId"
            ]
         },
         "roles_patch":{
            "title":"Role Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "namespace":{
                  "type":"string"
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "roles_list":{
            "title":"Roles list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/roles"
            }
         },
         "roles_paginated":{
            "title":"Paginated Roles list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/roles"
                  }
               }
            }
         },
         "permissions":{
            "title":"Permission",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "namespace":{
                  "type":"string"
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            },
            "required":[
               "name",
               "namespace",
               "organizationId"
            ]
         },
         "permissions_patch":{
            "title":"Permission Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "namespace":{
                  "type":"string"
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "permissions_list":{
            "title":"Permissions list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/permissions"
            }
         },
         "permissions_paginated":{
            "title":"Paginated Permissions list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/permissions"
                  }
               }
            }
         },
         "logins":{
            "title":"Login",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object"
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "default":{
                     
                  },
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "email":{
                  "type":"string",
                  "format":"email",
                  "description":"Email address associated with this login."
               },
               "provider":{
                  "type":"string"
               },
               "password":{
                  "type":"string",
                  "nullable":true
               },
               "salt":{
                  "type":"string",
                  "nullable":true
               },
               "user":{
                  "$ref":"#/components/schemas/users"
               }
            },
            "required":[
               "email",
               "provider"
            ]
         },
         "logins_patch":{
            "title":"Login Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object"
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "default":{
                     
                  },
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "email":{
                  "type":"string",
                  "format":"email",
                  "description":"Email address associated with this login."
               },
               "provider":{
                  "type":"string"
               },
               "password":{
                  "type":"string",
                  "nullable":true
               },
               "salt":{
                  "type":"string",
                  "nullable":true
               },
               "user":{
                  "$ref":"#/components/schemas/users"
               }
            }
         },
         "logins_list":{
            "title":"Logins list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/logins"
            }
         },
         "logins_paginated":{
            "title":"Paginated Logins list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/logins"
                  }
               }
            }
         },
         "invites":{
            "title":"Invite",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "email":{
                  "type":"string",
                  "format":"email",
                  "description":"Email address associated with this invite."
               },
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "teamRole":{
                  "type":"string",
                  "nullable":true
               },
               "redirectUrl":{
                  "type":"string",
                  "nullable":true,
                  "default":"https://cloudbees.com",
                  "format":"uri"
               }
            },
            "required":[
               "email"
            ]
         },
         "invites_patch":{
            "title":"Invite Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "email":{
                  "type":"string",
                  "format":"email",
                  "description":"Email address associated with this invite."
               },
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "teamRole":{
                  "type":"string",
                  "nullable":true
               },
               "redirectUrl":{
                  "type":"string",
                  "nullable":true,
                  "default":"https://cloudbees.com",
                  "format":"uri"
               }
            }
         },
         "invites_list":{
            "title":"Invites list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/invites"
            }
         },
         "invites_paginated":{
            "title":"Paginated Invites list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/invites"
                  }
               }
            }
         },
         "emailDomains":{
            "title":"EmailDomain",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "name":{
                  "type":"string",
                  "format":"hostname",
                  "description":"Domain name to be associated with home realm discovery."
               },
               "connectionId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "verified":{
                  "type":"boolean",
                  "default":false,
                  "description":"Indicates that ownership of the domain has been established for the associated organization.",
                  "readOnly":true
               },
               "challenge":{
                  "type":"string",
                  "format":"uuid",
                  "default":"aaaaaaaa-bbbb-4444-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-4444-cccc-dddddddddddd",
                  "description":"Domain challenge value.",
                  "readOnly":true
               }
            },
            "required":[
               "organizationId",
               "name"
            ]
         },
         "emailDomains_patch":{
            "title":"EmailDomain Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "name":{
                  "type":"string",
                  "format":"hostname",
                  "description":"Domain name to be associated with home realm discovery."
               },
               "connectionId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "verified":{
                  "type":"boolean",
                  "default":false,
                  "description":"Indicates that ownership of the domain has been established for the associated organization.",
                  "readOnly":true
               },
               "challenge":{
                  "type":"string",
                  "format":"uuid",
                  "default":"aaaaaaaa-bbbb-4444-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-4444-cccc-dddddddddddd",
                  "description":"Domain challenge value.",
                  "readOnly":true
               }
            }
         },
         "emailDomains_list":{
            "title":"Emaildomains list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/emailDomains"
            }
         },
         "emailDomains_paginated":{
            "title":"Paginated Emaildomains list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/emailDomains"
                  }
               }
            }
         },
         "connections":{
            "title":"Connection",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "entityId":{
                  "type":"string"
               },
               "signInEndpoint":{
                  "type":"string",
                  "format":"uri",
                  "description":"SAML assertion consumer service (ACS)."
               },
               "signingCert":{
                  "type":"string",
                  "maxLength":8192
               },
               "additionalOptions":{
                  "nullable":true,
                  "type":"object",
                  "description":"Additional options to be defined on the connection."
               },
               "enabled":{
                  "type":"boolean",
                  "default":false
               },
               "displayName":{
                  "type":"string"
               },
               "autoProvision":{
                  "type":"boolean",
                  "default":false
               },
               "strict":{
                  "type":"boolean",
                  "default":false
               }
            },
            "required":[
               "organizationId",
               "entityId",
               "signInEndpoint",
               "signingCert",
               "displayName"
            ]
         },
         "connections_patch":{
            "title":"Connection Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "organizationId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "entityId":{
                  "type":"string"
               },
               "signInEndpoint":{
                  "type":"string",
                  "format":"uri",
                  "description":"SAML assertion consumer service (ACS)."
               },
               "signingCert":{
                  "type":"string",
                  "maxLength":8192
               },
               "additionalOptions":{
                  "nullable":true,
                  "type":"object",
                  "description":"Additional options to be defined on the connection."
               },
               "enabled":{
                  "type":"boolean",
                  "default":false
               },
               "displayName":{
                  "type":"string"
               },
               "autoProvision":{
                  "type":"boolean",
                  "default":false
               },
               "strict":{
                  "type":"boolean",
                  "default":false
               }
            }
         },
         "connections_list":{
            "title":"Connections list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/connections"
            }
         },
         "connections_paginated":{
            "title":"Paginated Connections list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/connections"
                  }
               }
            }
         },
         "products":{
            "title":"Product",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               }
            },
            "required":[
               "name"
            ]
         },
         "products_patch":{
            "title":"Product Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               }
            }
         },
         "products_list":{
            "title":"Products list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/products"
            }
         },
         "products_paginated":{
            "title":"Paginated Products list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/products"
                  }
               }
            }
         },
         "scopes":{
            "title":"Scope",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            },
            "required":[
               "name"
            ]
         },
         "scopes_patch":{
            "title":"Scope Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            }
         },
         "scopes_list":{
            "title":"Scopes list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/scopes"
            }
         },
         "scopes_paginated":{
            "title":"Paginated Scopes list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/scopes"
                  }
               }
            }
         },
         "resourceTypes":{
            "title":"ResourceType",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            },
            "required":[
               "name"
            ]
         },
         "resourceTypes_patch":{
            "title":"ResourceType Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            }
         },
         "resourceTypes_list":{
            "title":"Resourcetypes list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/resourceTypes"
            }
         },
         "resourceTypes_paginated":{
            "title":"Paginated Resourcetypes list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/resourceTypes"
                  }
               }
            }
         },
         "resourceNames":{
            "title":"ResourceName",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            },
            "required":[
               "name"
            ]
         },
         "resourceNames_patch":{
            "title":"ResourceName Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "name":{
                  "type":"string"
               },
               "displayName":{
                  "type":"string",
                  "nullable":true
               },
               "description":{
                  "type":"string",
                  "nullable":true
               },
               "productId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               }
            }
         },
         "resourceNames_list":{
            "title":"Resourcenames list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/resourceNames"
            }
         },
         "resourceNames_paginated":{
            "title":"Paginated Resourcenames list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/resourceNames"
                  }
               }
            }
         },
         "resourceDefinitions":{
            "title":"ResourceDefinition",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "condition":{
                  "type":"string",
                  "nullable":true
               },
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               },
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               },
               "resourceTypeId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "resourceNameId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "user":{
                  "$ref":"#/components/schemas/users"
               }
            },
            "required":[
               "resourceTypeId"
            ]
         },
         "resourceDefinitions_patch":{
            "title":"ResourceDefinition Patch",
            "type":"object",
            "properties":{
               "id":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)",
                  "readOnly":true
               },
               "metadata":{
                  "anyOf":[
                     {
                        "type":"object",
                        "nullable":true
                     },
                     {
                        "title":"Metadata mutation operation",
                        "description":"JSON Patch operation to be performed (RFC 6902)",
                        "type":"array",
                        "items":{
                           "properties":{
                              "path":{
                                 "type":"string",
                                 "description":"JSON path",
                                 "example":"/key"
                              },
                              "op":{
                                 "type":"string",
                                 "description":"operation to be performed: add | replace",
                                 "example":"add"
                              },
                              "value":{
                                 "anyOf":[
                                    {
                                       "type":"object"
                                    },
                                    {
                                       "type":"array",
                                       "items":{
                                          
                                       }
                                    },
                                    {
                                       "type":"number"
                                    },
                                    {
                                       "type":"string"
                                    },
                                    {
                                       "type":"boolean"
                                    }
                                 ],
                                 "description":"new value",
                                 "example":"someVal"
                              },
                              "from":{
                                 "type":"string",
                                 "description":"starting key",
                                 "example":"/key"
                              }
                           }
                        }
                     }
                  ],
                  "description":"\n## Patching Metadata\nMetadata is a JSON object that is stored as is.  To update the metadata field you can pass one of the following to the patch request:\n\n**1. JSON**\nPassing JSON to metadata wil result in the the JSON being merged with what is already stored on the object.\nExample:\nIf an object already has a metadata field with the following:\n```\n{\n  \"metadata\": { \"my_field\": \"my_value\" },\n  ...\n}\n```\nSending a patch update with a new field:\n```\n{\n  \"metadata\": { \"new_field\": \"new_value\" }\n}\n```\nWill result in the final object looking like this:\n```\n{\n  \"metadata\": {\n    \"my_field\": \"my_value\",\n    \"new_field\": \"new_value\"\n  }\n}\n```\n**2. JSON Patch**\nPassing an array with JSON Patch format will execute those changes.  Please see the [JSON Patch](http://jsonpatch.com/) website for documentation.\nExample:\n```\n{\n  \"metadata\": [\n    { \"op\": \"add\", \"path\": \"/new_field\", \"value\": \"new_value\" }\n  ]\n}\n```\n"
               },
               "createdAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Created timestamp, ISO 8601",
                  "readOnly":true
               },
               "updatedAt":{
                  "type":"string",
                  "format":"date-time",
                  "nullable":true,
                  "description":"Last updated timestamp, ISO 8601",
                  "readOnly":true
               },
               "condition":{
                  "type":"string",
                  "nullable":true
               },
               "userId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               },
               "teamId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true
               },
               "resourceTypeId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "resourceNameId":{
                  "type":"string",
                  "format":"uuid",
                  "nullable":true,
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "user":{
                  "$ref":"#/components/schemas/users"
               }
            }
         },
         "resourceDefinitions_list":{
            "title":"Resourcedefinitions list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/resourceDefinitions"
            }
         },
         "resourceDefinitions_paginated":{
            "title":"Paginated Resourcedefinitions list",
            "type":"object",
            "properties":{
               "total":{
                  "type":"integer"
               },
               "limit":{
                  "type":"integer"
               },
               "skip":{
                  "type":"integer"
               },
               "data":{
                  "type":"array",
                  "description":"results",
                  "items":{
                     "$ref":"#/components/schemas/resourceDefinitions"
                  }
               }
            }
         },
         "resourceDefinitionScope_patch":{
            "title":"ResourceDefinitionScope Patch",
            "type":"object",
            "properties":{
               "resourceDefinitionId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               },
               "scopeId":{
                  "type":"string",
                  "format":"uuid",
                  "example":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "default":"aaaaaaaa-bbbb-1111-cccc-dddddddddddd",
                  "description":"Identifier (UUIDv1)"
               }
            }
         },
         "resourceDefinitionScope_list":{
            "title":"Resourcedefinitionscope list",
            "type":"array",
            "items":{
               "$ref":"#/components/schemas/resourceDefinitionScope"
            }
         }
      }
   },
   "paths":{
      "/api/v1/users":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "teams",
                        "teams::organization",
                        "teams::organization::roles",
                        "teams::organization::permissions",
                        "teams::organization::emailDomains",
                        "teams::organization::connections",
                        "teams::roles",
                        "teams::roles::organization",
                        "teams::roles::permissions",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::invites",
                        "teams::invites::team",
                        "roles",
                        "roles::organization",
                        "roles::organization::teams",
                        "roles::organization::permissions",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::teams",
                        "roles::teams::organization",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::permissions",
                        "roles::permissions::organization",
                        "logins"
                     ]
                  }
               },
               {
                  "description":"User's first name",
                  "in":"query",
                  "name":"firstName",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"User's last name",
                  "in":"query",
                  "name":"lastName",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Query for users based on query parameters. The response will always include all the logins associated with that user. Other associations may be included explicitly with the include parameter.",
            "summary":"Query users",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:read"
                  ]
               }
            ],
            "operationId":"findusers"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Create a user. Note: team membership (user assignment to teams) is entirely handled with the <a href=\"/docs#/Teams/post_api_v1_teams__teamId__membership\">team-membership endpoints</a>",
            "summary":"Create users",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/users"
                           },
                           {
                              "$ref":"#/components/schemas/users_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createusers"
         }
      },
      "/api/v1/users/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of users to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "teams",
                        "teams::organization",
                        "teams::organization::roles",
                        "teams::organization::permissions",
                        "teams::organization::emailDomains",
                        "teams::organization::connections",
                        "teams::roles",
                        "teams::roles::organization",
                        "teams::roles::permissions",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::invites",
                        "teams::invites::team",
                        "roles",
                        "roles::organization",
                        "roles::organization::teams",
                        "roles::organization::permissions",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::teams",
                        "roles::teams::organization",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::permissions",
                        "roles::permissions::organization",
                        "logins"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"The response will always include all the logins associated with that user. Other associations may be included explicitly with the include parameter.",
            "summary":"Get a user",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:read"
                  ]
               }
            ],
            "operationId":"getusers"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of users to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a user",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/users_patch"
                     }
                  }
               }
            },
            "operationId":"patchusers"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of users to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This method deletes a user, including all their references.",
            "summary":"Delete a user",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:write"
                  ]
               }
            ],
            "operationId":"removeusers"
         }
      },
      "/api/v1/users/{id}/permissions":{
         "get":{
            "parameters":[
               {
                  "description":"User identifier",
                  "in":"path",
                  "name":"id",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/userPermissions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Get a user along with their permissions for each of the organizations to which they belong.",
            "summary":"Get a user including their permissions.",
            "tags":[
               "Users"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "users:read"
                  ]
               }
            ],
            "operationId":"findUserPermissions"
         }
      },
      "/api/v1/organizations":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "teams",
                        "teams::roles",
                        "teams::roles::users",
                        "teams::roles::permissions",
                        "teams::users",
                        "teams::users::roles",
                        "teams::users::logins",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::userTeams::user",
                        "teams::invites",
                        "teams::invites::team",
                        "roles",
                        "roles::teams",
                        "roles::teams::users",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::users",
                        "roles::users::teams",
                        "roles::users::logins",
                        "roles::permissions",
                        "permissions",
                        "permissions::roles",
                        "permissions::roles::teams",
                        "permissions::roles::users",
                        "emailDomains",
                        "emailDomains::connection",
                        "connections",
                        "connections::emailDomains",
                        "connections::emailDomains::connection"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Url-friendly version of \"Name\"",
                  "in":"query",
                  "name":"domain",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/organizations_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Query for organizations based on query parameters. Associations may be included in the response explicitly with the include parameter.\n        The backend system is able to query based on any field of the Organization object. The field query params must match the value exactly of what is being searched for.",
            "summary":"Query organizations",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:read"
                  ]
               }
            ],
            "operationId":"findorganizations"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/organizations"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Creates one or more new organizations. A default team will automatically be created for each organization (team with flag default=true).  The users that are members of the default team are all the users in the organization.  The default team will also have the following roles:\n\n* admin - allows all actions for the team (add/remove members, modify team settings, delete team/organization)\n* user - is simply a member of the team\n        ",
            "summary":"Create organizations",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/organizations"
                           },
                           {
                              "$ref":"#/components/schemas/organizations_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createorganizations"
         }
      },
      "/api/v1/organizations/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of organizations to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "teams",
                        "teams::roles",
                        "teams::roles::users",
                        "teams::roles::permissions",
                        "teams::users",
                        "teams::users::roles",
                        "teams::users::logins",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::userTeams::user",
                        "teams::invites",
                        "teams::invites::team",
                        "roles",
                        "roles::teams",
                        "roles::teams::users",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::users",
                        "roles::users::teams",
                        "roles::users::logins",
                        "roles::permissions",
                        "permissions",
                        "permissions::roles",
                        "permissions::roles::teams",
                        "permissions::roles::users",
                        "emailDomains",
                        "emailDomains::connection",
                        "connections",
                        "connections::emailDomains",
                        "connections::emailDomains::connection"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/organizations"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get an organization",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:read"
                  ]
               }
            ],
            "operationId":"getorganizations"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of organizations to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/organizations"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update an organization",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/organizations_patch"
                     }
                  }
               }
            },
            "operationId":"patchorganizations"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of organizations to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/organizations"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This will remove all teams that belong to this organization and their associated roles as well.",
            "summary":"Delete an organization",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:write"
                  ]
               }
            ],
            "operationId":"removeorganizations"
         }
      },
      "/api/v1/organizations/domains/{domain}/availability":{
         "get":{
            "parameters":[
               {
                  "description":"Domain identifier",
                  "in":"path",
                  "name":"domain",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/domainAvailability"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Check availability of a particular domain.  A domain is a unique, short identifier for an organization, to be used as part of urls.",
            "summary":"Check domain availability",
            "tags":[
               "Organizations"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "organizations:availability"
                  ]
               }
            ],
            "operationId":"domainAvailability"
         }
      },
      "/api/v1/teams":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::roles",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "roles",
                        "roles::organization",
                        "roles::organization::permissions",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::users",
                        "roles::users::logins",
                        "roles::permissions",
                        "roles::permissions::organization",
                        "users",
                        "users::roles",
                        "users::roles::organization",
                        "users::roles::permissions",
                        "users::logins",
                        "users::logins::user",
                        "userTeams",
                        "userTeams::user",
                        "userTeams::user::roles",
                        "userTeams::user::logins",
                        "invites"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"UUID of the organization",
                  "in":"query",
                  "name":"organizationId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Query for teams based on query parameters. The response will always include all the logins associated with that user. Other associations may be included explicitly with the include parameter.",
            "summary":"Query teams",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:read"
                  ]
               }
            ],
            "operationId":"findteams"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Creating a team will automatically create the default roles of owner, admin, and user associated with the team. Only one team may have the flag, default=true, per Organization. The User initiating the team creation call will be added automatically as the team owner.",
            "summary":"Create teams",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/teams"
                           },
                           {
                              "$ref":"#/components/schemas/teams_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createteams"
         }
      },
      "/api/v1/teams/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of teams to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::roles",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "roles",
                        "roles::organization",
                        "roles::organization::permissions",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::users",
                        "roles::users::logins",
                        "roles::permissions",
                        "roles::permissions::organization",
                        "users",
                        "users::roles",
                        "users::roles::organization",
                        "users::roles::permissions",
                        "users::logins",
                        "users::logins::user",
                        "userTeams",
                        "userTeams::user",
                        "userTeams::user::roles",
                        "userTeams::user::logins",
                        "invites"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a team",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:read"
                  ]
               }
            ],
            "operationId":"getteams"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of teams to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a team",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/teams_patch"
                     }
                  }
               }
            },
            "operationId":"patchteams"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of teams to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a team will remove all roles belonging to this team and all associations with users.",
            "summary":"Delete a team",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "operationId":"removeteams"
         }
      },
      "/api/v1/roles":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::permissions",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "teams",
                        "teams::organization",
                        "teams::organization::permissions",
                        "teams::organization::emailDomains",
                        "teams::organization::connections",
                        "teams::users",
                        "teams::users::logins",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::userTeams::user",
                        "teams::invites",
                        "teams::invites::team",
                        "users",
                        "users::teams",
                        "users::teams::organization",
                        "users::teams::userTeams",
                        "users::teams::invites",
                        "users::logins",
                        "users::logins::user",
                        "permissions",
                        "permissions::organization",
                        "permissions::organization::teams",
                        "permissions::organization::emailDomains",
                        "permissions::organization::connections"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"UUID of the associated team.",
                  "in":"query",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/roles_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query roles",
            "tags":[
               "Roles"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "roles:read"
                  ]
               }
            ],
            "operationId":"findroles"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/roles"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Create roles",
            "summary":"Create roles",
            "tags":[
               "Roles"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "roles:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/roles"
                           },
                           {
                              "$ref":"#/components/schemas/roles_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createroles"
         }
      },
      "/api/v1/roles/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of roles to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::permissions",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "teams",
                        "teams::organization",
                        "teams::organization::permissions",
                        "teams::organization::emailDomains",
                        "teams::organization::connections",
                        "teams::users",
                        "teams::users::logins",
                        "teams::userTeams",
                        "teams::userTeams::team",
                        "teams::userTeams::user",
                        "teams::invites",
                        "teams::invites::team",
                        "users",
                        "users::teams",
                        "users::teams::organization",
                        "users::teams::userTeams",
                        "users::teams::invites",
                        "users::logins",
                        "users::logins::user",
                        "permissions",
                        "permissions::organization",
                        "permissions::organization::teams",
                        "permissions::organization::emailDomains",
                        "permissions::organization::connections"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/roles"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a role",
            "tags":[
               "Roles"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "roles:read"
                  ]
               }
            ],
            "operationId":"getroles"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of roles to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/roles"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This method updates a role with only the information passed in to the request. It is a partial update, not a full replacement.",
            "summary":"Update a role",
            "tags":[
               "Roles"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "roles:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/permissions_patch"
                     }
                  }
               }
            },
            "operationId":"patchroles"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of roles to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/roles"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a role will remove all records associated with this role.",
            "summary":"Delete a role",
            "tags":[
               "Roles"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "roles:write"
                  ]
               }
            ],
            "operationId":"removeroles"
         }
      },
      "/api/v1/permissions":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "roles",
                        "roles::organization",
                        "roles::organization::teams",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::teams",
                        "roles::teams::organization",
                        "roles::teams::users",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::users",
                        "roles::users::teams",
                        "roles::users::logins"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"UUID of the associated organization.",
                  "in":"query",
                  "name":"organizationId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"UUID of the associated role.",
                  "in":"query",
                  "name":"roleId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/permissions_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query permissions",
            "tags":[
               "Permissions"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "permissions:read"
                  ]
               }
            ],
            "operationId":"findpermissions"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/permissions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Create permissions",
            "summary":"Create permissions",
            "tags":[
               "Permissions"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "permissions:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/permissions"
                           },
                           {
                              "$ref":"#/components/schemas/permissions_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createpermissions"
         }
      },
      "/api/v1/permissions/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of permissions to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::emailDomains",
                        "organization::emailDomains::connection",
                        "organization::connections",
                        "organization::connections::emailDomains",
                        "roles",
                        "roles::organization",
                        "roles::organization::teams",
                        "roles::organization::emailDomains",
                        "roles::organization::connections",
                        "roles::teams",
                        "roles::teams::organization",
                        "roles::teams::users",
                        "roles::teams::userTeams",
                        "roles::teams::invites",
                        "roles::users",
                        "roles::users::teams",
                        "roles::users::logins"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/permissions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a permission",
            "tags":[
               "Permissions"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "permissions:read"
                  ]
               }
            ],
            "operationId":"getpermissions"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of permissions to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/permissions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This method updates a role with only the information passed in to the request. It is a partial update, not a full replacement.",
            "summary":"Update a permission",
            "tags":[
               "Permissions"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "permissions:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/permissions_patch"
                     }
                  }
               }
            },
            "operationId":"patchpermissions"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of permissions to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/permissions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a permission will remove all records associated with this permission.",
            "summary":"Delete a permission",
            "tags":[
               "Permissions"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "permissions:write"
                  ]
               }
            ],
            "operationId":"removepermissions"
         }
      },
      "/api/v1/logins":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "user",
                        "user::teams",
                        "user::teams::organization",
                        "user::teams::roles",
                        "user::teams::users",
                        "user::teams::userTeams",
                        "user::teams::invites",
                        "user::roles",
                        "user::roles::organization",
                        "user::roles::teams",
                        "user::roles::users",
                        "user::roles::permissions"
                     ]
                  }
               },
               {
                  "description":"Email of the user",
                  "in":"query",
                  "name":"email",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Name of the authentication provider.",
                  "in":"query",
                  "name":"provider",
                  "schema":{
                     "enum":[
                        "google",
                        "github",
                        "internal"
                     ],
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               },
               {
                  "description":"Search the first/given name of a user.",
                  "in":"query",
                  "name":"$user.first_name$",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Search the last/family name of a user.",
                  "in":"query",
                  "name":"$user.last_name$",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Queries will automatically include the user details in the response, if the login is associated with a user. The combination of provider and email is guaranteed to be unique.",
            "summary":"Query for a user's login data",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:read"
                  ]
               }
            ],
            "operationId":"findlogins"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This endpoint should only be called by our federated identity provider. Access is restricted by client id. Create a login with its associated user. You can also pass the userId of an existing user instead of the user in the body. \n        Password and salt are required if the provider is of type 'internal'.\n        The password has to be bcrypted with salt.\n        The salt should be of format '$Vers$log2(NumRounds)$saltvalue",
            "summary":"Create login",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/logins"
                           },
                           {
                              "$ref":"#/components/schemas/logins_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createlogins"
         }
      },
      "/api/v1/logins/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of logins to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "user",
                        "user::teams",
                        "user::teams::organization",
                        "user::teams::roles",
                        "user::teams::users",
                        "user::teams::userTeams",
                        "user::teams::invites",
                        "user::roles",
                        "user::roles::organization",
                        "user::roles::teams",
                        "user::roles::users",
                        "user::roles::permissions"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter. The response will automatically include the user details in the response, if the login is associated with a user.",
            "summary":"Get a login",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:read"
                  ]
               }
            ],
            "operationId":"getlogins"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of logins to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This method updates a role with only the information passed in to the request. It is a partial update, not a full replacement.",
            "summary":"Update a login",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Request body for login mutation",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/loginPassword"
                     }
                  }
               }
            },
            "operationId":"patchlogins"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of logins to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a permission will remove all records associated with this permission.",
            "summary":"Delete a login",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:write"
                  ]
               }
            ],
            "operationId":"removelogins"
         }
      },
      "/api/v1/logins/authenticate":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Validates a user's authentication via login and password. Authentication will only be successful if the login has the provider 'internal'.",
            "summary":"Authenticate a user",
            "tags":[
               "Logins"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "logins:authenticate"
                  ]
               }
            ],
            "requestBody":{
               "description":"Authentication details",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/authenticate"
                     }
                  }
               }
            },
            "operationId":"authenticate"
         }
      },
      "/api/v1/logins/logout":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/logins"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Sends a global log out event for a user, so that user's session is invalidated from all cloudbees apps in any device.",
            "summary":"Logout a user from all Cloudbees apps",
            "tags":[
               "Logins"
            ],
            "security":[
               
            ],
            "requestBody":{
               "description":"Logout details",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/logout"
                     }
                  }
               }
            },
            "operationId":"logout"
         }
      },
      "/api/v1/utils/initiate_mfa":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/mfaBarcode"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This starts the process of enabling MFA/2FA by generating the barcode uri to present to the user. Before calling this you must redirect the user to Auth0's authorize endpoint with the correct mfa audience. Note that the audience will always be domain.auth0.com. See: https://auth0.com/docs/api/authentication?http#authorization-code-flow for more information.",
            "summary":"Start the enable MFA/2FA process.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:manageMfa"
                  ]
               }
            ],
            "requestBody":{
               "description":"User and MFA details.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/mfaUser"
                     }
                  }
               }
            },
            "operationId":"initiateMfa"
         }
      },
      "/api/v1/utils/enable_mfa":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/mfaRecoveryCodes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"The mfaToken passed here is the same one as for the Initialize MFA flow. It is the token received from authorizing with the MFA audience.",
            "summary":"Finalize the enable MFA/2FA process.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:manageMfa"
                  ]
               }
            ],
            "requestBody":{
               "description":"User and MFA details with OTP code.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/mfaFinalize"
                     }
                  }
               }
            },
            "operationId":"enableMFA"
         }
      },
      "/api/v1/utils/disable_mfa":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created"
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"The mfaToken passed here is the same one as for the Initialize MFA flow. It is the token received from authorizing with the MFA audience. This will remove all authenticators from a user.",
            "summary":"Disable MFA/2FA.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:manageMfa"
                  ]
               }
            ],
            "requestBody":{
               "description":"User and MFA details.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/mfaUser"
                     }
                  }
               }
            },
            "operationId":"disableMFA"
         }
      },
      "/api/v1/utils/admin_disable_mfa":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created"
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Disable any 2FA/MFA connector for any user. This is an admin-only operation.",
            "summary":"Disable any 2FA/MFA (Admin only)",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:manageMfa"
                  ]
               }
            ],
            "requestBody":{
               "description":"Email of the user to remove its 2FA/MFA enrollment.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/mfaUserEmail"
                     }
                  }
               }
            },
            "operationId":"adminDisableMFA"
         }
      },
      "/api/v1/utils/process_pending_invites":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created"
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This API is intended to be called only by Auth0 during login process. This will lookup all pending invites of the user that just logged in and cleanup the invite after the user profile is appropriately updated.",
            "summary":"Lookup and process pending invites for logged in user.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:processPendingInvites"
                  ]
               }
            ],
            "requestBody":{
               "description":"User invite data to reprocess.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/processPendingInvites"
                     }
                  }
               }
            },
            "operationId":"processPendingInvites"
         }
      },
      "/api/v1/utils/connection-synchronization":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/ConnectionReconciliation"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This endpoint triggers a synchronization of the specified connection (or all connections) in the UDS database to the Cloudbees IDP, and optionally Grand Central (not yet implemented).",
            "summary":"Sync connection(s) to external systems.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:syncSamlConnections"
                  ]
               }
            ],
            "requestBody":{
               "description":"Connection(s) to sync.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/ConnectionSynchronization"
                     }
                  }
               }
            },
            "operationId":"syncConnections"
         }
      },
      "/api/v1/utils/legacy-connections":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections_list"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This creates a \"legacy\" connection in UDS from Auth0 data. These connections have metadata indicating they have non-standard logical names (meaning not samlp={connectionId}), to support connections migrated from GC.",
            "summary":"Import the specified Auth0 connection to UDS as a \"legacy connection\".",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:importLegacyConnections"
                  ]
               }
            ],
            "requestBody":{
               "description":"Connection(s) to import, and which organization ID they should be associated with.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/ImportLegacyConnection"
                     }
                  }
               }
            },
            "operationId":"importLegacyConnections"
         }
      },
      "/api/v1/utils/process-saml-login":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created"
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Validates that the domain in the SAML payload is associated with the connection used, and both are owned by the same organization. Requests to provision the specified user into the organization associated with the SAML connection they logged with, in the \"user\" role.",
            "summary":"Validate the SAML login and auto provision the user into the organization, if required. Called with every SAML login",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:processSamlLogin"
                  ]
               }
            ],
            "requestBody":{
               "description":"Email of user to provision.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/processSamlLogin"
                     }
                  }
               }
            },
            "operationId":"processSamlLogin"
         }
      },
      "/api/v1/utils/reset-password":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/passwordResetLink"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Util endpoint for getting a password reset link,",
            "summary":"Reset password",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:resetPassword"
                  ]
               }
            ],
            "requestBody":{
               "description":"",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/resetPassword"
                     }
                  }
               }
            },
            "operationId":"resetPassword"
         }
      },
      "/api/v1/utils/automatic-org-creation":{
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created"
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This API is intended to be called only by Auth0 during login process. This will check if the user is part of any organization already, and if not it will create a new personal one for the user.",
            "summary":"Lookup and created user organization if they are not part of any yet.",
            "tags":[
               "Utils"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "utils:automaticOrgCreation"
                  ]
               }
            ],
            "requestBody":{
               "description":"User information to search for orgs.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/automaticOrgCreation"
                     }
                  }
               }
            },
            "operationId":"automaticOrgCreation"
         }
      },
      "/api/v1/invites":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "team",
                        "team::organization",
                        "team::organization::teams",
                        "team::organization::roles",
                        "team::organization::permissions",
                        "team::organization::emailDomains",
                        "team::organization::connections",
                        "team::roles",
                        "team::roles::organization",
                        "team::roles::teams",
                        "team::roles::users",
                        "team::roles::permissions",
                        "team::users",
                        "team::users::teams",
                        "team::users::roles",
                        "team::users::logins",
                        "team::userTeams",
                        "team::userTeams::user"
                     ]
                  }
               },
               {
                  "description":"UUID of the associated team.",
                  "in":"query",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"UUID of the associated role.",
                  "in":"query",
                  "name":"roleId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Email of the user.",
                  "in":"query",
                  "name":"email",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/invites_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter. This API call should only be allowed for team owners or team admins.",
            "summary":"Query pending users invited to join team(s)",
            "tags":[
               "Invites"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "invites:read"
                  ]
               }
            ],
            "operationId":"findinvites"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/invites"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Creates invite record(s) and sends email(s) to the address(ee) specified. For requests with multiple invites, all invites must have matching teamId and redirectUrl. Subsequent POSTs will update existing invites for that email/teamId combination.",
            "summary":"Invite user to join team(s)",
            "tags":[
               "Invites"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "invites:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/invites"
                           },
                           {
                              "$ref":"#/components/schemas/invites_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createinvites"
         }
      },
      "/api/v1/invites/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of invites to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "team",
                        "team::organization",
                        "team::organization::teams",
                        "team::organization::roles",
                        "team::organization::permissions",
                        "team::organization::emailDomains",
                        "team::organization::connections",
                        "team::roles",
                        "team::roles::organization",
                        "team::roles::teams",
                        "team::roles::users",
                        "team::roles::permissions",
                        "team::users",
                        "team::users::teams",
                        "team::users::roles",
                        "team::users::logins",
                        "team::userTeams",
                        "team::userTeams::user"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/invites"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get an invite",
            "tags":[
               "Invites"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "invites:read"
                  ]
               }
            ],
            "operationId":"getinvites"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of invites to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/invites"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting an invite will prevent the invitee from being able to use it to join the inviting organization.",
            "summary":"Delete an invite",
            "tags":[
               "Invites"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "invites:write"
                  ]
               }
            ],
            "operationId":"removeinvites"
         }
      },
      "/api/v1/teams/{teamId}/membership":{
         "post":{
            "parameters":[
               {
                  "in":"path",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true,
                  "description":"teamId parameter"
               }
            ],
            "responses":{
               "201":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Assigns users to a particular role within a team.",
            "summary":"Create team memberships",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Team membership assignments.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/teamMembership"
                     }
                  }
               }
            },
            "deprecated":true,
            "operationId":"createTeamMemberships"
         }
      },
      "/api/v1/teams/{teamId}/membership/{id}":{
         "patch":{
            "parameters":[
               {
                  "description":"teamId parameter",
                  "in":"path",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"id of patch operation: (remove/replace)",
                  "in":"path",
                  "name":"id",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Update users associations with a particular role within a team.",
            "summary":"Update team memberships",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Team membership assignments.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/teamMembership"
                     }
                  }
               }
            },
            "deprecated":true,
            "operationId":"patchTeamMemberships"
         }
      },
      "/api/v1/teams/{teamId}/users":{
         "post":{
            "parameters":[
               {
                  "in":"path",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true,
                  "description":"teamId parameter"
               }
            ],
            "responses":{
               "201":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Assigns users to a particular role within a team.",
            "summary":"Add users to a team in the assigned roles",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Team membership assignments.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/teamMembership"
                     }
                  }
               }
            },
            "operationId":"createTeamUsers"
         },
         "delete":{
            "parameters":[
               {
                  "description":"teamId parameter",
                  "in":"path",
                  "name":"teamId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"users",
                  "in":"query",
                  "name":"userIds",
                  "schema":{
                     "type":"array",
                     "items":{
                        "type":"string"
                     }
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/teams"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Removes the specified users from a team. Will fail if any user is the last admin in an org.",
            "summary":"Remove users from a team",
            "tags":[
               "Teams"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "teams:write"
                  ]
               }
            ],
            "operationId":"removeTeamUsers"
         }
      },
      "/api/v1/email-domains":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::connections",
                        "connection",
                        "connection::organization",
                        "connection::organization::teams",
                        "connection::organization::roles",
                        "connection::organization::permissions",
                        "connection::organization::connections"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Organization identifier",
                  "in":"query",
                  "name":"organizationId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/emailDomains_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Query domains, optionally filtering on name, or organization identifier. Connections can be included.",
            "summary":"Query domains",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:read"
                  ]
               }
            ],
            "operationId":"findemailDomains"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/emailDomains"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Create domain(s)",
            "summary":"Create domain(s)",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/emailDomains"
                           },
                           {
                              "$ref":"#/components/schemas/emailDomains_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createemailDomains"
         }
      },
      "/api/v1/email-domains/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of emailDomains to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::connections",
                        "connection",
                        "connection::organization",
                        "connection::organization::teams",
                        "connection::organization::roles",
                        "connection::organization::permissions",
                        "connection::organization::connections"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/emailDomains"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Get a domain by id.",
            "summary":"Get a domain",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:read"
                  ]
               }
            ],
            "operationId":"getemailDomains"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of emailDomains to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/emailDomains"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Only the verification status or connectionId can be updated. Attempting to update the status to true will make a DNS query to verify the challenge record is set. The domain must be verified before association with a connection.",
            "summary":"Update a domain's verification status",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Authentication details",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/patchDomainDto"
                     }
                  }
               }
            },
            "operationId":"patchemailDomains"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of emailDomains to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/emailDomains"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a domain will remove the SAML integration for the associated domain.",
            "summary":"Delete a domain",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "operationId":"removeemailDomains"
         }
      },
      "/api/v1/connections":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::emailDomains",
                        "emailDomains",
                        "emailDomains::organization",
                        "emailDomains::organization::teams",
                        "emailDomains::organization::roles",
                        "emailDomains::organization::permissions"
                     ]
                  }
               },
               {
                  "description":"Organization identifier",
                  "in":"query",
                  "name":"organizationId",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Query connections, optionally filtering on organization identifier. Email domains can be included.",
            "summary":"Query connections",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:read"
                  ]
               }
            ],
            "operationId":"findconnections"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections"
                        }
                     }
                  }
               },
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Create a connection. Multi-create not supported",
            "summary":"Create a connection",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Authentication details",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/connectionEmailDomains"
                     }
                  }
               }
            },
            "operationId":"createconnections"
         }
      },
      "/api/v1/connections/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of connections to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "organization",
                        "organization::teams",
                        "organization::teams::roles",
                        "organization::teams::users",
                        "organization::teams::userTeams",
                        "organization::teams::invites",
                        "organization::roles",
                        "organization::roles::teams",
                        "organization::roles::users",
                        "organization::roles::permissions",
                        "organization::permissions",
                        "organization::permissions::roles",
                        "organization::emailDomains",
                        "emailDomains",
                        "emailDomains::organization",
                        "emailDomains::organization::teams",
                        "emailDomains::organization::roles",
                        "emailDomains::organization::permissions"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Get a connection by id.",
            "summary":"Get a connection",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:read"
                  ]
               }
            ],
            "operationId":"getconnections"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of connections to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Updates specified properties on the connection. All SAML integrations for the associated domains will be affected.",
            "summary":"Updates a connection",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Authentication details",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/connectionEmailDomains"
                     }
                  }
               }
            },
            "operationId":"patchconnections"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of connections to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/connections"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a connection will remove the SAML integration for the associated domains.",
            "summary":"Delete a connection",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:write"
                  ]
               }
            ],
            "operationId":"removeconnections"
         }
      },
      "/api/v1/connections/{connectionId}/samlp-metadata":{
         "get":{
            "parameters":[
               {
                  "description":"Connection identifier",
                  "in":"path",
                  "name":"connectionId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/ConnectionSamlpMetadata"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Get the SAML SP metadata for the specified connection.",
            "summary":"SAML connection metadata",
            "tags":[
               "SAML"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "saml:read"
                  ]
               }
            ],
            "operationId":"findSamlMetadata"
         }
      },
      "/api/v1/self/teams/{id}":{
         "delete":{
            "parameters":[
               {
                  "description":"Team identifier",
                  "in":"path",
                  "name":"id",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/users"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Removes the subject from the specified team.",
            "summary":"Removes the subject from the specified team.",
            "tags":[
               "Self"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               }
            ],
            "operationId":"removeSelf"
         }
      },
      "/api/v1/products":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "scopes",
                        "scopes::resourceDefinitions",
                        "scopes::resourceDefinitions::user",
                        "scopes::resourceDefinitions::team",
                        "scopes::resourceDefinitions::resourceType",
                        "scopes::resourceDefinitions::resourceName",
                        "scopes::resourceDefinitions::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes::resourceDefinition",
                        "scopes::resourceDefinitionScopes::scope",
                        "resourceTypes",
                        "resourceTypes::resourceDefinitions",
                        "resourceTypes::resourceDefinitions::user",
                        "resourceTypes::resourceDefinitions::team",
                        "resourceTypes::resourceDefinitions::resourceType",
                        "resourceTypes::resourceDefinitions::resourceName",
                        "resourceTypes::resourceDefinitions::scopes",
                        "resourceTypes::resourceDefinitions::resourceDefinitionScopes",
                        "resourceNames",
                        "resourceNames::resourceDefinitions",
                        "resourceNames::resourceDefinitions::user",
                        "resourceNames::resourceDefinitions::team",
                        "resourceNames::resourceDefinitions::resourceType",
                        "resourceNames::resourceDefinitions::resourceName",
                        "resourceNames::resourceDefinitions::scopes",
                        "resourceNames::resourceDefinitions::resourceDefinitionScopes"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/products_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query products",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "products:read"
                  ]
               }
            ],
            "operationId":"findproducts"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/products"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"A product is the top level grouping of resource types, names, and scopes",
            "summary":"Create products",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "products:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/products"
                           },
                           {
                              "$ref":"#/components/schemas/products_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createproducts"
         }
      },
      "/api/v1/products/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of products to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "scopes",
                        "scopes::resourceDefinitions",
                        "scopes::resourceDefinitions::user",
                        "scopes::resourceDefinitions::team",
                        "scopes::resourceDefinitions::resourceType",
                        "scopes::resourceDefinitions::resourceName",
                        "scopes::resourceDefinitions::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes::resourceDefinition",
                        "scopes::resourceDefinitionScopes::scope",
                        "resourceTypes",
                        "resourceTypes::resourceDefinitions",
                        "resourceTypes::resourceDefinitions::user",
                        "resourceTypes::resourceDefinitions::team",
                        "resourceTypes::resourceDefinitions::resourceType",
                        "resourceTypes::resourceDefinitions::resourceName",
                        "resourceTypes::resourceDefinitions::scopes",
                        "resourceTypes::resourceDefinitions::resourceDefinitionScopes",
                        "resourceNames",
                        "resourceNames::resourceDefinitions",
                        "resourceNames::resourceDefinitions::user",
                        "resourceNames::resourceDefinitions::team",
                        "resourceNames::resourceDefinitions::resourceType",
                        "resourceNames::resourceDefinitions::resourceName",
                        "resourceNames::resourceDefinitions::scopes",
                        "resourceNames::resourceDefinitions::resourceDefinitionScopes"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/products"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a product",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "products:read"
                  ]
               }
            ],
            "operationId":"getproducts"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of products to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/products"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a product",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "products:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/products_patch"
                     }
                  }
               }
            },
            "operationId":"patchproducts"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of products to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/products"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a product will remove all scopes, resource types, names, and definitions linked to it.",
            "summary":"Delete a product",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "products:write"
                  ]
               }
            ],
            "operationId":"removeproducts"
         }
      },
      "/api/v1/scopes":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::resourceTypes",
                        "product::resourceTypes::resourceDefinitions",
                        "product::resourceNames",
                        "product::resourceNames::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceType",
                        "resourceDefinitions::resourceType::product",
                        "resourceDefinitions::resourceName",
                        "resourceDefinitions::resourceName::product",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitionScopes",
                        "resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitionScopes::resourceDefinition::user",
                        "resourceDefinitionScopes::resourceDefinition::team",
                        "resourceDefinitionScopes::resourceDefinition::resourceType",
                        "resourceDefinitionScopes::resourceDefinition::resourceName"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/scopes_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query scopes",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "scopes:read"
                  ]
               }
            ],
            "operationId":"findscopes"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/scopes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"A scope is a mechanism to limit access. In general, use the structure 'ITEM:READ' or 'ITEM:WRITE' for the scope name.",
            "summary":"Create scopes",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "scopes:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/scopes"
                           },
                           {
                              "$ref":"#/components/schemas/scopes_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createscopes"
         }
      },
      "/api/v1/scopes/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of scopes to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::resourceTypes",
                        "product::resourceTypes::resourceDefinitions",
                        "product::resourceNames",
                        "product::resourceNames::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceType",
                        "resourceDefinitions::resourceType::product",
                        "resourceDefinitions::resourceName",
                        "resourceDefinitions::resourceName::product",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitionScopes",
                        "resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitionScopes::resourceDefinition::user",
                        "resourceDefinitionScopes::resourceDefinition::team",
                        "resourceDefinitionScopes::resourceDefinition::resourceType",
                        "resourceDefinitionScopes::resourceDefinition::resourceName"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/scopes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a scope",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "scopes:read"
                  ]
               }
            ],
            "operationId":"getscopes"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of scopes to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/scopes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a scope",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "scopes:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/scopes_patch"
                     }
                  }
               }
            },
            "operationId":"patchscopes"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of scopes to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/scopes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a scope will remove all associated resource definitions.",
            "summary":"Delete a scope",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "scopes:write"
                  ]
               }
            ],
            "operationId":"removescopes"
         }
      },
      "/api/v1/resource-types":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::scopes",
                        "product::scopes::resourceDefinitions",
                        "product::scopes::resourceDefinitionScopes",
                        "product::resourceNames",
                        "product::resourceNames::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceName",
                        "resourceDefinitions::resourceName::product",
                        "resourceDefinitions::scopes",
                        "resourceDefinitions::scopes::product",
                        "resourceDefinitions::scopes::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitions::resourceDefinitionScopes::scope"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceTypes_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query resource types",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceTypes:read"
                  ]
               }
            ],
            "operationId":"findresourceTypes"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceTypes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"A resource type defines the main resources for a module. These should be as broad as possible.",
            "summary":"Create resource types",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceTypes:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/resourceTypes"
                           },
                           {
                              "$ref":"#/components/schemas/resourceTypes_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createresourceTypes"
         }
      },
      "/api/v1/resource-types/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceTypes to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::scopes",
                        "product::scopes::resourceDefinitions",
                        "product::scopes::resourceDefinitionScopes",
                        "product::resourceNames",
                        "product::resourceNames::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceName",
                        "resourceDefinitions::resourceName::product",
                        "resourceDefinitions::scopes",
                        "resourceDefinitions::scopes::product",
                        "resourceDefinitions::scopes::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitions::resourceDefinitionScopes::scope"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceTypes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a resource type",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceTypes:read"
                  ]
               }
            ],
            "operationId":"getresourceTypes"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceTypes to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceTypes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a resource type",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceTypes:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/resourceTypes_patch"
                     }
                  }
               }
            },
            "operationId":"patchresourceTypes"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceTypes to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceTypes"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a resource type will remove all associated resource definitions.",
            "summary":"Delete a resource type",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceTypes:write"
                  ]
               }
            ],
            "operationId":"removeresourceTypes"
         }
      },
      "/api/v1/resource-names":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::scopes",
                        "product::scopes::resourceDefinitions",
                        "product::scopes::resourceDefinitionScopes",
                        "product::resourceTypes",
                        "product::resourceTypes::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceType",
                        "resourceDefinitions::resourceType::product",
                        "resourceDefinitions::scopes",
                        "resourceDefinitions::scopes::product",
                        "resourceDefinitions::scopes::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitions::resourceDefinitionScopes::scope"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceNames_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query resource names",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceNames:read"
                  ]
               }
            ],
            "operationId":"findresourceNames"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceNames"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"A resource name defines the main resources for a module. These should be as broad as possible.",
            "summary":"Create resource names",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceNames:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/resourceNames"
                           },
                           {
                              "$ref":"#/components/schemas/resourceNames_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createresourceNames"
         }
      },
      "/api/v1/resource-names/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceNames to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "product",
                        "product::scopes",
                        "product::scopes::resourceDefinitions",
                        "product::scopes::resourceDefinitionScopes",
                        "product::resourceTypes",
                        "product::resourceTypes::resourceDefinitions",
                        "resourceDefinitions",
                        "resourceDefinitions::user",
                        "resourceDefinitions::user::teams",
                        "resourceDefinitions::user::roles",
                        "resourceDefinitions::user::logins",
                        "resourceDefinitions::team",
                        "resourceDefinitions::team::organization",
                        "resourceDefinitions::team::roles",
                        "resourceDefinitions::team::users",
                        "resourceDefinitions::team::userTeams",
                        "resourceDefinitions::team::invites",
                        "resourceDefinitions::resourceType",
                        "resourceDefinitions::resourceType::product",
                        "resourceDefinitions::scopes",
                        "resourceDefinitions::scopes::product",
                        "resourceDefinitions::scopes::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes",
                        "resourceDefinitions::resourceDefinitionScopes::resourceDefinition",
                        "resourceDefinitions::resourceDefinitionScopes::scope"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceNames"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a resource name",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceNames:read"
                  ]
               }
            ],
            "operationId":"getresourceNames"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceNames to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceNames"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a resource name",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceNames:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/resourceNames_patch"
                     }
                  }
               }
            },
            "operationId":"patchresourceNames"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceNames to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceNames"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a resource name will remove all associated resource definitions.",
            "summary":"Delete a resource name",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceNames:write"
                  ]
               }
            ],
            "operationId":"removeresourceNames"
         }
      },
      "/api/v1/resource-definitions":{
         "get":{
            "parameters":[
               {
                  "description":"Number of results to return",
                  "in":"query",
                  "name":"$limit",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Number of results to skip",
                  "in":"query",
                  "name":"$skip",
                  "required":false,
                  "schema":{
                     "type":"integer"
                  }
               },
               {
                  "description":"Property to sort results",
                  "in":"query",
                  "name":"$sort",
                  "style":"deepObject",
                  "schema":{
                     "type":"object"
                  }
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "user",
                        "user::teams",
                        "user::teams::organization",
                        "user::teams::roles",
                        "user::teams::users",
                        "user::teams::userTeams",
                        "user::teams::invites",
                        "user::roles",
                        "user::roles::organization",
                        "user::roles::teams",
                        "user::roles::users",
                        "user::roles::permissions",
                        "user::logins",
                        "team",
                        "team::organization",
                        "team::organization::teams",
                        "team::organization::roles",
                        "team::organization::permissions",
                        "team::organization::emailDomains",
                        "team::organization::connections",
                        "team::roles",
                        "team::roles::organization",
                        "team::roles::teams",
                        "team::roles::users",
                        "team::roles::permissions",
                        "team::users",
                        "team::users::teams",
                        "team::users::roles",
                        "team::users::logins",
                        "team::userTeams",
                        "team::userTeams::user",
                        "team::invites",
                        "resourceType",
                        "resourceType::product",
                        "resourceType::product::scopes",
                        "resourceType::product::resourceTypes",
                        "resourceType::product::resourceNames",
                        "resourceName",
                        "resourceName::product",
                        "resourceName::product::scopes",
                        "resourceName::product::resourceTypes",
                        "resourceName::product::resourceNames",
                        "scopes",
                        "scopes::product",
                        "scopes::product::resourceTypes",
                        "scopes::product::resourceNames",
                        "scopes::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes::scope",
                        "resourceDefinitionScopes",
                        "resourceDefinitionScopes::scope",
                        "resourceDefinitionScopes::scope::product"
                     ]
                  }
               },
               {
                  "description":"Name",
                  "in":"query",
                  "name":"name",
                  "schema":{
                     "type":"string"
                  },
                  "required":false
               },
               {
                  "description":"Parameter for deep querying of metadata field. Query for the existence of specific key/values:\n```\n{\n  \"myField\": \"myValue\"\n}\n```\n\nNested objects are supported:\n```\n{\n  \"outer\": {\n    \"inner\": true\n  }\n}\n```\n",
                  "in":"query",
                  "name":"metadata",
                  "schema":{
                     "type":"object"
                  },
                  "style":"deepObject"
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions_paginated"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Query resource definitions",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitions:read"
                  ]
               }
            ],
            "operationId":"findresourceDefinitions"
         },
         "post":{
            "parameters":[
               
            ],
            "responses":{
               "201":{
                  "description":"created",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"A resource definition defines the main resources for a module. These should be as broad as possible.",
            "summary":"Create resource definitions",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitions:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "oneOf":[
                           {
                              "$ref":"#/components/schemas/resourceDefinitions"
                           },
                           {
                              "$ref":"#/components/schemas/resourceDefinitions_list"
                           }
                        ]
                     }
                  }
               }
            },
            "operationId":"createresourceDefinitions"
         }
      },
      "/api/v1/resource-definitions/{id}":{
         "get":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceDefinitions to return",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"Related objects to include in the response, may be specified multiple times with different values. It will also allow nested queries to related objects in the form of \"entity1::entity2\".",
                  "in":"query",
                  "name":"include",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "enum":[
                        "user",
                        "user::teams",
                        "user::teams::organization",
                        "user::teams::roles",
                        "user::teams::users",
                        "user::teams::userTeams",
                        "user::teams::invites",
                        "user::roles",
                        "user::roles::organization",
                        "user::roles::teams",
                        "user::roles::users",
                        "user::roles::permissions",
                        "user::logins",
                        "team",
                        "team::organization",
                        "team::organization::teams",
                        "team::organization::roles",
                        "team::organization::permissions",
                        "team::organization::emailDomains",
                        "team::organization::connections",
                        "team::roles",
                        "team::roles::organization",
                        "team::roles::teams",
                        "team::roles::users",
                        "team::roles::permissions",
                        "team::users",
                        "team::users::teams",
                        "team::users::roles",
                        "team::users::logins",
                        "team::userTeams",
                        "team::userTeams::user",
                        "team::invites",
                        "resourceType",
                        "resourceType::product",
                        "resourceType::product::scopes",
                        "resourceType::product::resourceTypes",
                        "resourceType::product::resourceNames",
                        "resourceName",
                        "resourceName::product",
                        "resourceName::product::scopes",
                        "resourceName::product::resourceTypes",
                        "resourceName::product::resourceNames",
                        "scopes",
                        "scopes::product",
                        "scopes::product::resourceTypes",
                        "scopes::product::resourceNames",
                        "scopes::resourceDefinitionScopes",
                        "scopes::resourceDefinitionScopes::scope",
                        "resourceDefinitionScopes",
                        "resourceDefinitionScopes::scope",
                        "resourceDefinitionScopes::scope::product"
                     ]
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Associations may be included in the response explicitly with the include parameter.",
            "summary":"Get a resource definition",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitions:read"
                  ]
               }
            ],
            "operationId":"getresourceDefinitions"
         },
         "patch":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceDefinitions to update",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"This is a partial update, only the fields passed in will be updated.",
            "summary":"Update a resource definition",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitions:write"
                  ]
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/resourceDefinitions_patch"
                     }
                  }
               }
            },
            "operationId":"patchresourceDefinitions"
         },
         "delete":{
            "parameters":[
               {
                  "in":"path",
                  "name":"id",
                  "description":"ID of resourceDefinitions to remove",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "404":{
                  "description":"not found"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Deleting a resource definition will remove all associated resource definitions.",
            "summary":"Delete a resource definition",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitions:write"
                  ]
               }
            ],
            "operationId":"removeresourceDefinitions"
         }
      },
      "/api/v1/resource-definitions/{resourceDefinitionId}/scopes":{
         "post":{
            "parameters":[
               {
                  "in":"path",
                  "name":"resourceDefinitionId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true,
                  "description":"resourceDefinitionId parameter"
               }
            ],
            "responses":{
               "201":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Link scopes to a resource definition",
            "summary":"Add scopes to a resource definition",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitionScope:write"
                  ]
               }
            ],
            "requestBody":{
               "description":"Scope ids to link.",
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/resourceDefinitionScopes"
                     }
                  }
               }
            },
            "operationId":"createresourceDefinitionScope"
         },
         "delete":{
            "parameters":[
               {
                  "description":"resourceDefinitionId parameter",
                  "in":"path",
                  "name":"resourceDefinitionId",
                  "schema":{
                     "type":"string"
                  },
                  "required":true
               },
               {
                  "description":"scopes",
                  "in":"query",
                  "name":"scopeIds",
                  "schema":{
                     "type":"array",
                     "items":{
                        "type":"string"
                     }
                  },
                  "required":true
               }
            ],
            "responses":{
               "200":{
                  "description":"success",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/resourceDefinitions"
                        }
                     }
                  }
               },
               "401":{
                  "description":"not authenticated"
               },
               "500":{
                  "description":"general error"
               }
            },
            "description":"Removes the specified scopes from a resource definition.",
            "summary":"Remove scopes from a resource definition",
            "tags":[
               "Permissions Service"
            ],
            "security":[
               {
                  "bearerAuth":[
                     
                  ]
               },
               {
                  "m2m":[
                     "resourceDefinitionScope:write"
                  ]
               }
            ],
            "operationId":"removeresourceDefinitionScope"
         }
      }
   },
   "openapi":"3.0.2"
}
